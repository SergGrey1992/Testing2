{"version":3,"sources":["PreLoader/Preloader.module.css","selectors/selectors.ts","api/api.ts","redux/loadingReducer.ts","redux/dataReducer.ts","PreLoader/Preloader.tsx","components/InputComponent.tsx","components/ButtonComponent.tsx","components/ResultComponent.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["module","exports","dataApi","state","dataReducer","loadingReducer","Api","axios","get","setStatus","status","type","initState","requestError","setFilteredData","filteredData","setMessage","message","data","valueInputText","isRegister","Preloader","className","s","preloaderPage","preloader","InputComponent","React","memo","value","checked","handler","onChange","ButtonComponent","title","onClick","ResultComponent","length","map","el","index","App","useSelector","dispatch","useDispatch","onChangeInputValue","useCallback","event","currentTarget","onChangeHandler","onClickFilterLength","filter","onClickSubStringValue","every","ell","includes","toLowerCase","useEffect","then","res","catch","e","console","log","finally","Number","reducer","combineReducers","action","errorText","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.403f3120.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderPage\":\"Preloader_preloaderPage__22p5B\",\"preloader\":\"Preloader_preloader__2FoS_\",\"load4\":\"Preloader_load4__z4W5e\"};","// import { IGlobalState } from './state';\r\n//\r\n// interface IRootState extends IGlobalState { }\r\n//\r\n// export const selectCurrencies = (state: IRootState) => state.currency.currencies;\r\n// export const selectCurrentCurrency = (state: IRootState) => state.currency.currentCurrency;\r\n// export const selectIsBuying = (state: IRootState) => state.currency.isBuying;\r\n// export const selectAmountOfBYN = (state: IRootState) => state.currency.amountOfBYN;\r\n// export const selectAmountOFCurrency = (state: IRootState) => state.currency.amountOfCurrency;\r\n//\r\n//\r\n// export const selectCurrencyState = (state: IRootState) => state.currency;\r\n\r\nimport {RootStoreType} from \"../redux/store\";\r\n\r\nexport const dataApi = (state: RootStoreType) => state.dataReducer\r\nexport const loadingReducer = (state: RootStoreType) => state.loadingReducer\r\n","import axios from \"axios\";\r\n//Ругалось на Cors\r\n//обходил с помощью ссылки на прокси\r\n//https://cors-anywhere.herokuapp.com\r\n//если будет 403 ошибка в Network, то надо перейти по ссылке вышел и получить доступ\r\n\r\nexport const Api = {\r\n\tgetData: () => {\r\n\t\treturn  axios.get('https://cors-anywhere.herokuapp.com/http://www.mrsoft.by/data.json')\r\n\t}\r\n}","// Actions\r\nexport const setStatus = (status: RequestStatusType) => ({\r\n\ttype: '/app/SET-STATUS', status} as const)\r\ntype setAppStatusType = ReturnType<typeof setStatus>\r\nconst setRequestError = (errorText: string | null) => ({\r\n\ttype: '/app/SET-REQUEST-ERROR', errorText} as const)\r\ntype setRequestErrorType = ReturnType<typeof setRequestError>\r\n\r\nexport type LoadingActionsType = setAppStatusType | setRequestErrorType\r\n\r\n// State\r\nconst initState: LoadingInitStateType = {\r\n\tstatus: 'idle',\r\n\trequestError: null\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type LoadingInitStateType = {\r\n\tstatus: RequestStatusType\r\n\trequestError: string | null\r\n}\r\n\r\n// Reducer\r\nexport const loadingReducer = (state = initState, action: LoadingActionsType): LoadingInitStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase '/app/SET-STATUS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstatus: action.status\r\n\t\t\t}\r\n\t\tcase '/app/SET-REQUEST-ERROR':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\trequestError: action.errorText\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn {...state}\r\n\t}\r\n}\r\n","import {Api} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {LoadingActionsType, setStatus} from \"./loadingReducer\";\r\n// Actions\r\nexport const setData = (data: Array<string>) => ({\r\n\ttype: 'redux/dataReducer/SET-DATA', data\r\n} as const)\r\ntype setDataType = ReturnType<typeof setData>\r\nexport const setValueInputText = (value: string) => ({\r\n\ttype: 'redux/dataReducer/SET-VALUE-INPUT-TEXT', value\r\n} as const)\r\ntype setValueInputTextType = ReturnType<typeof setValueInputText>\r\nexport const setFilteredData = (filteredData: Array<string>) => ({\r\n\ttype: 'redux/dataReducer/SET-FILTERED-DATA', filteredData\r\n} as const)\r\ntype setFilteredDataType = ReturnType<typeof setFilteredData>\r\nexport const setIsRegister = (checked: boolean) => ({\r\n\ttype: 'redux/dataReducer/SET-IS-REGISTER', checked\r\n} as const)\r\ntype setIsRegisterType = ReturnType<typeof setIsRegister>\r\n\r\nexport const setMessage = (message: string) => ({\r\n\ttype: 'redux/dataReducer/SET-MESSAGE', message\r\n} as const)\r\ntype setMessageType = ReturnType<typeof setMessage>\r\n\r\n\r\nexport type DataActionsType = setDataType\r\n\t| setValueInputTextType\r\n\t| setFilteredDataType\r\n\t| setIsRegisterType\r\n\t| setMessageType\r\n\r\n\r\n// State\r\nconst initState: DataInitStateType = {\r\n\tdata: [],\r\n\tvalueInputText: '',\r\n\tfilteredData: [],\r\n\tisRegister: false,\r\n\tmessage: '',\r\n\r\n}\r\nexport type DataInitStateType = {\r\n\tdata: string[]\r\n\tvalueInputText: string\r\n\tfilteredData: string[]\r\n\tisRegister: boolean\r\n\tmessage: string\r\n\r\n}\r\n// Reducer\r\nexport const dataReducer = (state = initState, action: DataActionsType): DataInitStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"redux/dataReducer/SET-DATA\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.data\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase \"redux/dataReducer/SET-VALUE-INPUT-TEXT\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tvalueInputText: action.value,\r\n\t\t\t\tmessage: ''\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase \"redux/dataReducer/SET-FILTERED-DATA\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tfilteredData: action.filteredData\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase \"redux/dataReducer/SET-IS-REGISTER\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisRegister: action.checked\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase \"redux/dataReducer/SET-MESSAGE\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmessage: action.message\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn {...state}\r\n\t}\r\n}\r\n// Thunk\r\nexport const getDataThunk = () => (dispatch: Dispatch<DataActionsType | LoadingActionsType>) => {\r\n\tdispatch(setStatus('loading'))\r\n\treturn Api.getData()\r\n\t\t.then((res) => {\r\n\t\t\tdispatch(setData(res.data.data))\r\n\t\t})\r\n\t\t.catch( (e)=> {\r\n\t\t\tconsole.log(e)\r\n\t\t} )\r\n\t\t.finally(() => {\r\n\t\t\tdispatch(setStatus('succeeded'))\r\n\t\t})\r\n}","import React from 'react';\r\nimport s from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n  return <div className={s.preloaderPage}>\r\n    {/*<div className={s.preloaderWrapper}>*/}\r\n      <div className={s.preloader}>Loading...</div>\r\n    {/*</div>*/}\r\n  </div>\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n\ttype: string\r\n\tvalue?: string\r\n\tchecked?: boolean\r\n\thandler: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const InputComponent: React.FC<PropsType> = React.memo (( { type, value, checked, handler}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input type={type} value={value} checked={checked} onChange={handler}/>\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React from 'react';\r\n\r\ntype PropsType = {\r\n\ttitle: string\r\n\thandler: () => void\r\n}\r\n\r\nexport const ButtonComponent: React.FC<PropsType> = React.memo (function ({title, handler}) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button onClick={handler}>{title}</button>\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React from 'react';\r\n\r\ntype PropsType = {\r\n\tfilteredData: string[]\r\n}\r\n\r\nexport const ResultComponent: React.FC<PropsType> = React.memo (({filteredData}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>Результат: {filteredData.length !== 0 ? filteredData.map((el, index) => <span\r\n\t\t\t\tkey={index}> {index}.{el}; </span>) : 'Нет совпадений'}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React, {ChangeEvent, useCallback, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {dataApi, loadingReducer} from './selectors/selectors';\nimport {getDataThunk, setFilteredData, setIsRegister, setMessage, setValueInputText} from \"./redux/dataReducer\";\nimport {Preloader} from \"./PreLoader/Preloader\";\nimport { InputComponent } from './components/InputComponent';\nimport { ButtonComponent } from './components/ButtonComponent';\nimport { ResultComponent } from './components/ResultComponent';\n\nexport const App = () => {\n\tconst {data, valueInputText, filteredData, isRegister, message} = useSelector(dataApi)\n\tconst {status} = useSelector(loadingReducer)\n\tconst dispatch = useDispatch();\n\n\tconst validate = (value: string) => {\n\t\tif (Number(value)) {\n\t\t\tif (!message) {\n\t\t\t\tdispatch(setMessage(\"Number\"))\n\t\t\t}\n\t\t} else {\n\t\t\tif (!message) {\n\t\t\t\tdispatch(setMessage(\"String\"))\n\t\t\t}\n\t\t}\n\t\treturn value\n\t}\n\tconst onChangeInputValue = useCallback(\n\t\t(event: ChangeEvent<HTMLInputElement>) => dispatch(setValueInputText(event.currentTarget.value)\n\t\t), [dispatch])\n\n\tconst onChangeHandler = useCallback(\n\t\t(event: ChangeEvent<HTMLInputElement>) => dispatch(setIsRegister(event.currentTarget.checked)\n\t\t), [dispatch])\n\n\tconst onClickFilterLength = useCallback(\n\t\t() => dispatch(setFilteredData(data.filter(el => el.length > +valueInputText))\n\t\t), [dispatch, data, valueInputText])\n\n\tconst onClickSubStringValue = useCallback(() => {\n\t\tisRegister\n\t\t\t? dispatch(setFilteredData(data.filter(el => [valueInputText].every(ell => el.includes(ell)))))\n\t\t\t: dispatch(setFilteredData(data.filter(el => [valueInputText.toLowerCase()].every(ell => el.toLowerCase().includes(ell.toLowerCase())))))\n\t}, [data, isRegister, valueInputText, dispatch])\n\n\tuseEffect(() => {\n\t\tdispatch(getDataThunk())\n\t}, [dispatch])\n\n\tif (status === 'loading') {\n\t\treturn <Preloader/>\n\t}\n\treturn (\n\t\t<div>\n\t\t\tПри вводе значений появятся нужные кнопки:\n\t\t\t<br/>\n\t\t\t<InputComponent type={'text'} value={validate(valueInputText)} handler={onChangeInputValue}/>\n\t\t\t{message === \"Number\" &&\n\t\t\t\t\t<ButtonComponent title={'фильтр по длине слов'} handler={onClickFilterLength}/>\n\t\t\t}\n\t\t\t{message === \"String\" &&\n      <div>\n          <ButtonComponent title={'фильтр по подстроке'} handler={onClickSubStringValue}/>\n          <span>регистр:</span>\n          <InputComponent type={'checkbox'} checked={isRegister} handler={onChangeHandler}/>\n      </div>\n\t\t\t}\n\t\t\t{message ? message : \"\"}\n\t\t\t<ResultComponent filteredData={filteredData}/>\n\t\t</div>\n\t);\n}\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {dataReducer} from \"./dataReducer\";\r\nimport {loadingReducer} from \"./loadingReducer\";\r\n\r\nconst reducer = combineReducers({\r\n\tdataReducer: dataReducer,\r\n\tloadingReducer: loadingReducer\r\n})\r\nexport type RootStoreType = ReturnType<typeof reducer>\r\nexport const store = createStore(reducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport {Provider} from 'react-redux';\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}